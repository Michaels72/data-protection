AWSTemplateFormatVersion: "2010-09-09"

Description: This AWS CloudFormation Template creates the necessary resources for the data encryption builders session 

Parameters:
  
   ResourceName:
      Type: String
      Default: crypto-builders-session
      AllowedValues: 
      - crypto-builders-session
      Description: Prefix for resources created in this session.
      
   InstanceType: 
    Type: String
    Default: t2.medium
    AllowedValues: 
      - t2.micro
      - t2.medium
    Description: Pick a instance type for the Cloud9 environment 
      
# This IAM user will be used for all login and development
Resources:

   VPC:
      Type: AWS::EC2::VPC
      Properties:
         CidrBlock: 10.0.0.0/16
         EnableDnsHostnames: true
         EnableDnsSupport: true
         Tags:
            - Key: Name
              Value: !Ref ResourceName
   
   InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
         Tags:
            - Key: Name
              Value: !Ref ResourceName
              
   GatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
         InternetGatewayId:
           Ref: InternetGateway
         VpcId: !Ref VPC
         
   RouteTable:
      DependsOn:
      - VPC
      Type: AWS::EC2::RouteTable
      Properties:
         Tags:
           - Key: Name
             Value: !Ref ResourceName
         VpcId: !Ref VPC
         
   PublicRoute:
      DependsOn:
         - RouteTable
         - GatewayAttachment
      Type: AWS::EC2::Route
      Properties:
         DestinationCidrBlock: 0.0.0.0/0
         GatewayId: !Ref InternetGateway
         RouteTableId: !Ref RouteTable
         
   Subnet:
      Type: AWS::EC2::Subnet
      Properties:
         CidrBlock: 10.0.0.0/24
         MapPublicIpOnLaunch: true
         Tags:
           - Key: Name
             Value: !Ref ResourceName
         VpcId: !Ref VPC
         
   SubnetAssoc:
      DependsOn:
         - Subnet
         - RouteTable
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
         RouteTableId: !Ref RouteTable
         SubnetId: !Ref Subnet
         
   PublicNACL:
      Type: AWS::EC2::NetworkAcl
      Properties:
         VpcId: !Ref VPC
         Tags:
           -
            Key: Network
            Value: Public
            
   InboundPublicNACLEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
         NetworkAclId: !Ref PublicNACL
         RuleNumber: 100
         Protocol: -1
         RuleAction: allow
         Egress: false
         CidrBlock: '0.0.0.0/0'
         PortRange:
           From: 0
           To: 65535
           
   OutboundPublicNACLEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
         NetworkAclId: !Ref PublicNACL
         RuleNumber: 100
         Protocol: -1
         RuleAction: allow
         Egress: true
         CidrBlock: 0.0.0.0/0
         PortRange:
           From: 0
           To: 65535
           
   SubnetNACLAssociation:
      Type: AWS::EC2::SubnetNetworkAclAssociation
      Properties:
         SubnetId: !Ref Subnet
         NetworkAclId: !Ref PublicNACL
         
  # Create a cloudwatch event rule that will trigger the cryptobuider-cse-lambda lambda
# function when GenerateDataKey calls are made

   cryptocweeventcse:
      Type : AWS::Events::Rule
      Properties: 
         Description: "Cloudwatch event rule for client side encryption usecases"
         EventPattern: 
            source: 
               - "aws.kms"
            detail-type: 
               - "AWS API Call via CloudTrail"
            detail: 
               eventSource: 
                  - "kms.amazonaws.com"
               eventName: 
                  - "GenerateDataKey"
         Name: 'crypto-builder-cse-cw-rule'
         State: "ENABLED"
         Targets:
            - 
               Arn: !GetAtt cryptocselambda.Arn
               Id: "cw-rule-cse"
               
   # Create a cloud9 environment 

# Create the lambda function used for client side encryption usecase
# This is mainly for studying GenerateDataKey calls that happen during client
# side encryption with data key caching and without data key caching

   cryptocselambda:
      Type : AWS::Lambda::Function
      Properties: 
         FunctionName: 'cryptobuilder-cse-lambda'
         Handler: "index.lambda_handler"
         Role: !GetAtt cryptocwelambdarole.Arn
         Runtime: 'python2.7'
         Code: 
            ZipFile: |
               from __future__ import print_function
               import os
               import boto3
               import random
               
               
               # Main event function for pushing CW events containing GenerateDataKey calls 
               def lambda_handler(event, context):
                   ###############################################################################################
                   #                                                                                             #
                   #   Lambda function get a cloudwatch event for the GenerateDatakeyCall                        #
                   #   for the KMS service                                                                       #                                                                     #
                   #                                                                                             #
                   #   Checks if the encryption context matches the client side encryption context provided for  #
                   #   cse usecases                                                                              #
                   #                                                                                             #
                   #   Creates a bucket with a tag containing the encryption context so that the usecase code    #
                   #   can identify whether GenerateDataKey call was for CSE usecase-2 or usecase-3              #
                   ###############################################################################################
                   
                   print (event['detail'])
                   region = os.environ['AWS_REGION']
                   print(region)
                   s3_client = boto3.client('s3', region)
                   
                   whatfor_value = event['detail']['requestParameters']['encryptionContext']['whatfor']
                   
                   bucket_name = 'reinvent-builder-bucket-cw-event' + str(random.randint(1, 100000))
                   # Doing the below because locationconstraint does not support all regions today
                   if 'us-east' in region:
                        s3_client.create_bucket(Bucket=bucket_name)
                   else:
                        s3_client.create_bucket(
                           Bucket=bucket_name,
                           CreateBucketConfiguration={
                                'LocationConstraint': region
                           }
                        )
            
                   response = s3_client.put_bucket_tagging(
                       Bucket=bucket_name,
                       Tagging={
                           'TagSet': [
                               {
                                   'Key': 'whatfor',
                                   'Value': whatfor_value
                               },
                           ]
                       }
                   )
                   print("Exiting")
               
                   return

   # We will use admin privileges for now and make it least privilege as we learn
   cryptocwelambdarole:
      Type : AWS::IAM::Role
      Properties:
         RoleName: 'cryptobuildercwelambdarole'
         AssumeRolePolicyDocument: 
           Version: "2012-10-17"
           Statement: 
             - 
               Effect: "Allow"
               Principal: 
                 Service: 
                   - "lambda.amazonaws.com"
               Action: 
                 - "sts:AssumeRole"
         
      
   # We will use admin privileges for now and make it least privilege as we learn
   cryptocwelambdapolicy:
      Type : AWS::IAM::Policy
      Properties: 
         PolicyName : 'cryptobuilder-cse-cwe-lambda-policy'
         PolicyDocument : 
            Version: "2012-10-17"
            Statement:
              -
               Effect: "Allow"
               Action: "*"
               Resource: "*"
         Roles:
            - !Ref cryptocwelambdarole
            
   LambdaInvokePermission:
     Type: AWS::Lambda::Permission
     Properties:
       FunctionName: !GetAtt cryptocselambda.Arn
       Action: 'lambda:InvokeFunction'
       Principal: 'events.amazonaws.com'
       SourceArn: !GetAtt cryptocweeventcse.Arn
       
   S3Bucket: 
      DeletionPolicy: Retain
      Type: AWS::S3::Bucket
      Properties: {}
   BucketPolicy: 
      Type: AWS::S3::BucketPolicy
      Properties: 
         Bucket: 
            Ref: S3Bucket
         PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
               - 
                  Sid: "AWSCloudTrailAclCheck"
                  Effect: "Allow"
                  Principal: 
                     Service: "cloudtrail.amazonaws.com"
                  Action: "s3:GetBucketAcl"
                  Resource: 
                     !Sub |-
                     arn:aws:s3:::${S3Bucket}
               - 
                  Sid: "AWSCloudTrailWrite"
                  Effect: "Allow"
                  Principal: 
                     Service: "cloudtrail.amazonaws.com"
                  Action: "s3:PutObject"
                  Resource:
                     !Sub |-
                     arn:aws:s3:::${S3Bucket}/AWSLogs/${AWS::AccountId}/*
                  Condition: 
                     StringEquals:
                        s3:x-amz-acl: "bucket-owner-full-control"
    
   myTrail: 
      DependsOn: 
         - BucketPolicy
      Type: AWS::CloudTrail::Trail
      Properties: 
         S3BucketName: 
            Ref: S3Bucket
         IsLogging: true

   cryptocloud9env:
      Type : AWS::Cloud9::EnvironmentEC2
      Properties: 
         Description: "Cloud9 environment for the crypto builders python modules"
         AutomaticStopTimeMinutes: 60
         InstanceType: !Ref InstanceType
         Name: "workshop-environment"
         SubnetId: !Ref Subnet

   # We will use admin privileges for now and make it least privilege as we learn
   cryptocloudninerole:
      Type : AWS::IAM::Role
      Properties:
         RoleName: 'cryptobuildercloudninerole'
         AssumeRolePolicyDocument: 
           Version: "2012-10-17"
           Statement: 
             - 
               Effect: "Allow"
               Principal: 
                 Service: 
                   - "ec2.amazonaws.com"
                   - "cloud9.amazonaws.com"
               Action: 
                 - "sts:AssumeRole"
         
   # Policy for a user trying out modules on a Cloud9 environment 
   cryptocloudninepolicy:
      Type : AWS::IAM::Policy
      Properties: 
         PolicyName : 'cryptobuilder-cloudnine-policy'
         PolicyDocument : 
            Version: "2012-10-17"
            Statement:
              -
               Effect: "Allow"
               Action: "*"
               Resource: "*"
         Roles:
            - !Ref cryptocloudninerole
         
            




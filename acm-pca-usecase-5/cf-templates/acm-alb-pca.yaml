AWSTemplateFormatVersion: "2010-09-09"

Description: This AWS CloudFormation Template creates the necessary resources for the data encryption builders session 

Parameters:
  
   ResourceName:
      Type: String
      Default: crypto-builders-session
      AllowedValues: 
      - crypto-builders-session
      Description: Prefix for resources created in this session.
      
   InstanceType: 
    Type: String
    Default: t2.medium
    AllowedValues: 
      - t2.micro
      - t2.medium
    Description: Pick a instance type for the Cloud9 environment 
    
   SecurityGroupIds:
  - String
SubnetIds:
  - String
      
# This IAM user will be used for all login and development
Resources:

   VPC:
      Type: AWS::EC2::VPC
      Properties:
         CidrBlock: 10.0.0.0/16
         EnableDnsHostnames: true
         EnableDnsSupport: true
         Tags:
            - Key: Name
              Value: !Ref ResourceName
   
   InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
         Tags:
            - Key: Name
              Value: !Ref ResourceName
              
   GatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
         InternetGatewayId:
           Ref: InternetGateway
         VpcId: !Ref VPC
         
   RouteTable:
      DependsOn:
      - VPC
      Type: AWS::EC2::RouteTable
      Properties:
         Tags:
           - Key: Name
             Value: !Ref ResourceName
         VpcId: !Ref VPC
         
   PublicRoute:
      DependsOn:
         - RouteTable
         - GatewayAttachment
      Type: AWS::EC2::Route
      Properties:
         DestinationCidrBlock: 0.0.0.0/0
         GatewayId: !Ref InternetGateway
         RouteTableId: !Ref RouteTable
         
   Subnet:
      Type: AWS::EC2::Subnet
      Properties:
         CidrBlock: 10.0.0.0/24
         MapPublicIpOnLaunch: true
         Tags:
           - Key: Name
             Value: !Ref ResourceName
         VpcId: !Ref VPC
         
   SubnetAssoc:
      DependsOn:
         - Subnet
         - RouteTable
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
         RouteTableId: !Ref RouteTable
         SubnetId: !Ref Subnet
         
   PublicNACL:
      Type: AWS::EC2::NetworkAcl
      Properties:
         VpcId: !Ref VPC
         Tags:
           -
            Key: Network
            Value: Public
            
   InboundPublicNACLEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
         NetworkAclId: !Ref PublicNACL
         RuleNumber: 100
         Protocol: -1
         RuleAction: allow
         Egress: false
         CidrBlock: '0.0.0.0/0'
         PortRange:
           From: 0
           To: 65535
           
   OutboundPublicNACLEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
         NetworkAclId: !Ref PublicNACL
         RuleNumber: 100
         Protocol: -1
         RuleAction: allow
         Egress: true
         CidrBlock: 0.0.0.0/0
         PortRange:
           From: 0
           To: 65535
           
   SubnetNACLAssociation:
      Type: AWS::EC2::SubnetNetworkAclAssociation
      Properties:
         SubnetId: !Ref Subnet
         NetworkAclId: !Ref PublicNACL

# Create the lambda function used for client side encryption usecase
# This is mainly for studying GenerateDataKey calls that happen during client
# side encryption with data key caching and without data key caching

   lambdaoriginone:
      Type : AWS::Lambda::Function
      Properties: 
         FunctionName: 'lambda-origin-one'
         Code : 
            S3Bucket: "crypto-builders-dont-remove"
            S3Key: "lambda-origin-one.zip"
         Handler: 'lambda_handler'
         Role: !GetAtt lambdaoriginrole.Arn
         Runtime: 'python2.7'
         VPCConfig :
            SecurityGroupIds:
               - String
            SubnetIds:
               - String
         
   lambdaorigintwo:
      Type : AWS::Lambda::Function
      Properties: 
         FunctionName: 'lambda-origin-two'
         Code : 
            S3Bucket: "crypto-builders-dont-remove"
            S3Key: "lambda-origin-two.zip"
         Handler: 'lambda_handler'
         Role: !GetAtt lambdaoriginrole.Arn
         Runtime: 'python2.7'
   
   # We will use admin privileges for now and make it least privilege as we learn
   lambdaoriginrole:
      Type : AWS::IAM::Role
      Properties:
         RoleName: 'acmcalblambdaoriginrole'
         AssumeRolePolicyDocument: 
           Version: "2012-10-17"
           Statement: 
             - 
               Effect: "Allow"
               Principal: 
                 Service: 
                   - "lambda.amazonaws.com"
               Action: 
                 - "sts:AssumeRole"
         
   # We will use admin privileges for now and make it least privilege as we learn
   lambdaoriginpolicy:
      Type : AWS::IAM::Policy
      Properties: 
         PolicyName : 'acm-alb-lambdaorigin-policy'
         PolicyDocument : 
            Version: "2012-10-17"
            Statement:
              -
               Effect: "Allow"
               Action: "*"
               Resource: "*"
         Roles:
            - !Ref lambdaoriginrole
            
  




         


         
            



